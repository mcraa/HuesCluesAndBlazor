@page "/board"

@using HuesCluesAndBlazor.Shared.Enums
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.WebUtilities
@using HuesCluesAndBlazor.Shared.Models

@inject NavigationManager NavigationManager

<PageTitle>HuesClues - Board</PageTitle>

<div class="tiles-container">

    @for(int i=0; i<=_colorsCount; ++i) {        
        <div class="color-row">
            @for(int j=0; j<=_colorsCount; ++j) {
                if (i == 0 && j != 0) {
                    <span class="color-tile heading">  @(Convert.ToChar(j + 64))  </span>
                } else {
                    if (j == 0 && i != 0) {
                        <span class="color-tile heading">  @(i)  </span>
                    } else {
                        if (i == 0 && j == 0) {
                            <span class="color-tile">&nbsp;</span>
                            continue;
                        }

                        var x = i;
                        var y = j;
                        <span 
                            @onclick="@(e => ClickTile(x, y))"
                            class="color-tile" 
                            style=@($"background-color: {GetHslForCoordinate(i,j)}")
                        > 
                            @(GetTileValue(i, j))
                        </span>
                    }
                }
            }
        </div>
    }
</div>

<div class="players-list">
    <ol>
        @for (int i = 0; i < _gameState.Players.Count; i++)
        {
            <li>@_gameState.Players[i].Name</li>
        }
    </ol>
</div>

@if (_welcomeScreen) {
    <div class="modal fade show" tabindex="-1" style="display: block;" role="dialog" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Join game as</h5>
                </div>
                <div class="modal-body">
                    <form>
                        <div class="form-group">
                            <label for="userInput">Name*</label>
                            <input type="text" class="form-control" id="userInput" @bind="userInput" />
                        </div>
                        <br />
                        <div class="form-group">
                            <label for="serverUrlInput">Server address:</label>
                            <input type="text" class="form-control" id="serverUrlInput" @bind="serverUrlInput" />
                            <small id="serverUrlHelp" class="form-text text-muted">Optional, defaults to current url</small>
                        </div>
                    </form>
                    
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" data-dismiss="modal" @onclick="JoinGame">Go!</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private HubConnection? hubConnection;

    [Parameter]
    public string? ColorsCount { get; set; }

    public PlayerAndState? Player { get; set; }

    private GameState _gameState {get; set;}

    private string? serverUrlInput;

    private string? userInput;

    private bool _welcomeScreen { get; set; } = true;
    
    private int _colorsCount { get; set; } = 16;

    protected override async Task OnInitializedAsync() {

        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue(nameof(ColorsCount), out var value))
        {
            ColorsCount = value.First();
        }

        if (!string.IsNullOrEmpty(ColorsCount) && Int32.TryParse(ColorsCount, out int ccnt)) 
        {
            _colorsCount = ccnt;
        }         

        initBoard();

        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/boardhub"))
            .Build();

        hubConnection.On<GameState, string>(MessageTypes.ClientHandleUpdate, (gameState, cId) =>
        {
            _gameState = gameState;            
            StateHasChanged();
        });

        hubConnection.On<string, GameState>(MessageTypes.ClientRegisterName, (cId, gameState) =>
        {
            var currentPlayer = gameState.Players
                .Where(p => string.Equals(p.Id, cId))
                .ToList()
                .First();
            
            currentPlayer.Name = userInput;

            if (gameState.Board.Count == 0) {
                gameState.Board = _gameState.Board;
            } else {
                _colorsCount = _gameState.Board.Count;
            }

            hubConnection.SendAsync(MessageTypes.ServerSyncUpdate, gameState).Wait();

            StateHasChanged();
        });
    }

    private void initBoard() {

        _gameState = new GameState {
            Board = new List<List<string>>(),
            Players = new List<PlayerAndState>()
        };

        for (var i = 0; i <= _colorsCount; ++i) {
            _gameState.Board.Add(new List<string>());
            for (var j = 0; j <=_colorsCount; ++j) {
                _gameState.Board[i].Add("");
            }
        }       
    }

    public async Task ClickTile(int i, int j) {
        _gameState.Board[i][j] = userInput ;

        await hubConnection.SendAsync(MessageTypes.ServerSyncUpdate, _gameState);
    }

    public async Task JoinGame() { 

        await hubConnection.StartAsync();
        _welcomeScreen = false;
    }   

    public string GetHslForCoordinate(int x, int y) {
        
        return $"hsl({x * 360 / _colorsCount }, {y * 100 / _colorsCount}%, {(2 * _colorsCount - (y+x)) * 97 / _colorsCount / 2}%)";
    }

    public string GetTileValue(int i, int j) {
        if (i < _gameState.Board.Count) {
            if (j < _gameState.Board[i].Count) {
                return _gameState.Board[i][j];
            } 
        } 

        return "";
    } 
}
